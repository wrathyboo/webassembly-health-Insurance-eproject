@page "/policies"
@using HealthInsurance.Shared
@using HealthInsurance.Shared.Dto
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using Blazored.LocalStorage
@using System.Net.Http.Headers
@layout AdminLayout
@attribute [Authorize(Roles = "Administrator")]
@inject ILocalStorageService localStorage
@inject HttpClient Http
@inject NavigationManager navigationManager

@using Helpers
<h3>Policies</h3>

@if (Policies == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Description</th>
                <th>Amount</th>
                <th>EMI</th>
                <th>Company</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var x in Policies)
            {
                <tr>
                    <td>@x.Id</td>
                    <td>@x.Name</td>
                    <td>@x.Description</td>
                    <td>@x.Amount</td>
                    <td>@x.Emi</td>
                    @if (x.Company != null)
                    {
                        <td><a href="javascript: void(0)" @onclick="@(() => CompanyDetails(@x.Id))">Company details</a></td>
                    }
                    else
                    {
                        <td>No company</td>
                    }
                    <td><button class="btn btn-primary" @onclick="@(() => Edit(@x.Id))">Edit</button> | <button class="btn btn-danger" @onclick="@(() => Delete(@x.Id))">Delete</button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Policy>? Policies;
    private List<PolicyDto> policyDtos = new List<PolicyDto>();
    bool error = false;
    protected override async Task OnInitializedAsync()
    {
        await LoadData();

        // //Get an item named authToken which is the user's JWT token received after logged in stored in blazor local storage
        // var token = await localStorage.GetItemAsync<string>("authToken");
        // Employees = await Http.GetJsonAsync<List<EmployeeModel>>(
        //     "api/employee",
        //     //Pass token to the header before communicate to the API endpoints
        //     new AuthenticationHeaderValue("Bearer", token),"get");
    }

    void CompanyDetails(int id)
    {
        navigationManager.NavigateTo($"company-details/{id}");
    }

    void Add()
    {
        navigationManager.NavigateTo("edit-policy");
    }

    void Edit(int id)
    {
        navigationManager.NavigateTo($"edit-policy/{id}");
    }

    async Task Delete(int id)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Confirm delete?"); // Confirm
        var result = await Http.DeleteAsync($"api/policy/{id}");

        if (result.IsSuccessStatusCode)
        {
            await JsRuntime.InvokeVoidAsync("alert", $"Successfully deleted policy {id}!"); // Alert
            await LoadData();
        }
        else
        {
            error = true;
        }

    }

    async Task LoadData()
    {
        Policies = await Http.GetFromJsonAsync<List<Policy>>("api/policy");

       
    }

}

